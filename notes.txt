*** Accessing the API from a pod and from localhost

The recommended way to locate the apiserver within the pod is with the kubernetes.default.svc DNS name,
which resolves to a Service IP which in turn will be routed to an apiserver.

API server health check

:8080/healtz for api server health check

*** etcd health check

etcd node health check on AKS? Etcd exposes its health check endpoint at http://<etcd-node>:2379/health BUT where is it on AKS/GKE?

:8080/healthz/etcd seems to be checking etcd health. But no docs have been provided. I can't read Go.

*** Controller manager health check

Controller Manager exposes its health check endpoint at http://<controller-manager>:10252/healthz

*** Scheduler health check

Scheduler exposes its health check endpoint at http://<scheduler>:10251/healthz

*** Customer apps health check

For apps, we should recommend setting a healthz livenessprobe as described here: https://kubernetes.io/docs/tutorials/k8s201/#health-checking
If the master components are healthy, then the app will be fixed.

************ Q

***

Should we really monitor the cluster or should ve monitor the application? If the application is healthy then we can send traffic, if not, it doesn't matter
whether a kubernetes master component -say the api server- is unhealthy.

If the app is not healthy then it doesn't matter if the cluster metrics are looking fine.

***

1) I can't find the API call to get the same data.

2) This isn't usable for AKS. Scheduler and Controller-Manager are always showing unhealthy.

PS C:\Users\emkenci> kubectl get componentstatus
NAME                 STATUS      MESSAGE                                                                                        ERROR
scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: getsockopt: connection refused
controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: getsockopt: connection refused
etcd-0               Healthy     {"health": "true"}

***

Get node resource usage: localhost:8001/apis/metrics.k8s.io/v1beta1/nodes

localhost:8001/healthz gives us the api-server component health 
localhost:8001/api/v1/componentstatuses this gives us everything we need in terms of moitoring 

***
API server health check failed on path: /healthz/etcd. Status code: 403 body: {"kind":"Status","apiVersion":"v1","metadata":{},"status":"Failure","message":"forbidden: User \"system:serviceaccount:default:default\" cannot get path \"/healthz/etcd\": Unknown user \"system:serviceaccount:default:default\"","reason":"Forbidden","details":{},"code":403}

RBAC is enabled by default on GKE.  The default service account needs be authorized for the code to work.

kubectl create rolebinding default-sa-view --clusterrole=view --serviceaccount=default:default --namespace=default
kubectl create rolebinding default-sa-cluster-view --clusterrole=view --group=system:serviceaccounts:default --namespace=default